{"version":3,"file":"main.js","sources":["../src/constants.ts","../src/cube/constants.ts","../src/math.ts","../src/cube/geometry.ts","../src/cube/parsing/color.ts","../src/cube/parsing/arrow.ts","../src/cube/drawing.tsx","../src/cube/masking.ts","../src/cube/simulation.ts","../src/cube/parsing/algorithm.ts","../src/cube/stickers.ts","../src/cube/parsing/rotation.ts","../src/cube/parsing/faceletColors.ts","../src/cube/parsing/colorScheme.ts","../src/cube/parsing/faceletDefinitions.ts","../src/cube/parsing/options.ts","../src/index.tsx"],"sourcesContent":["import { Face } from '..'\r\n\r\nexport enum ColorCode {\r\n  Black = '#000000',\r\n  DarkGray = '#404040',\r\n  Gray = '#808080',\r\n  Silver = '#BFBFBF',\r\n  White = '#FFFFFF',\r\n  Yellow = '#FEFE00',\r\n  Red = '#EE0000',\r\n  Orange = '#FFA100',\r\n  Blue = '#0000F2',\r\n  Green = '#00D800',\r\n  Purple = '#A83DD9',\r\n  Pink = '#F33D7B',\r\n  Transparent = 'transparent',\r\n}\r\n\r\nexport enum ColorName {\r\n  Black = 'black',\r\n  DarkGray = 'darkGray',\r\n  Gray = 'gray',\r\n  Silver = 'silver',\r\n  White = 'white',\r\n  Yellow = 'yellow',\r\n  Red = 'red',\r\n  Orange = 'orange',\r\n  Blue = 'blue',\r\n  Green = 'green',\r\n  Purple = 'purple',\r\n  Pink = 'pink',\r\n  Transparent = 'transparent',\r\n}\r\n\r\nexport enum ColorAbbreviation {\r\n  Black = 'n',\r\n  DarkGray = 'd',\r\n  Gray = 'l',\r\n  Silver = 's',\r\n  White = 'w',\r\n  Yellow = 'y',\r\n  Red = 'r',\r\n  Orange = 'o',\r\n  Blue = 'b',\r\n  Green = 'g',\r\n  Purple = 'm',\r\n  Pink = 'p',\r\n  Transparent = 't',\r\n}\r\n\r\nexport enum FaceletDefinition {\r\n  Up = 'u',\r\n  Down = 'd',\r\n  Left = 'l',\r\n  Right = 'r',\r\n  Back = 'b',\r\n  Front = 'f',\r\n  Transparent = 't',\r\n  Oriented = 'o',\r\n  Blank = 'n',\r\n}\r\n\r\nexport const ColorNameToCode: { [name: string]: ColorCode } = {\r\n  [ColorName.Black]: ColorCode.Black,\r\n  [ColorName.DarkGray]: ColorCode.DarkGray,\r\n  [ColorName.Gray]: ColorCode.Gray,\r\n  [ColorName.Silver]: ColorCode.Silver,\r\n  [ColorName.White]: ColorCode.White,\r\n  [ColorName.Yellow]: ColorCode.Yellow,\r\n  [ColorName.Red]: ColorCode.Red,\r\n  [ColorName.Orange]: ColorCode.Orange,\r\n  [ColorName.Blue]: ColorCode.Blue,\r\n  [ColorName.Green]: ColorCode.Green,\r\n  [ColorName.Purple]: ColorCode.Purple,\r\n  [ColorName.Pink]: ColorCode.Pink,\r\n}\r\n\r\nexport const ColorAbbreviationToCode: { [name: string]: ColorCode } = {\r\n  [ColorAbbreviation.Black]: ColorCode.Black,\r\n  [ColorAbbreviation.DarkGray]: ColorCode.DarkGray,\r\n  [ColorAbbreviation.Gray]: ColorCode.Gray,\r\n  [ColorAbbreviation.Silver]: ColorCode.Silver,\r\n  [ColorAbbreviation.White]: ColorCode.White,\r\n  [ColorAbbreviation.Yellow]: ColorCode.Yellow,\r\n  [ColorAbbreviation.Red]: ColorCode.Red,\r\n  [ColorAbbreviation.Orange]: ColorCode.Orange,\r\n  [ColorAbbreviation.Blue]: ColorCode.Blue,\r\n  [ColorAbbreviation.Green]: ColorCode.Green,\r\n  [ColorAbbreviation.Purple]: ColorCode.Purple,\r\n  [ColorAbbreviation.Pink]: ColorCode.Pink,\r\n  [ColorAbbreviation.Transparent]: ColorCode.Transparent,\r\n}\r\n\r\nexport const FaceletAbbreviateToDefinition: { [facelet: string]: FaceletDefinition } = {\r\n  u: FaceletDefinition.Up,\r\n  f: FaceletDefinition.Front,\r\n  r: FaceletDefinition.Right,\r\n  d: FaceletDefinition.Down,\r\n  l: FaceletDefinition.Left,\r\n  b: FaceletDefinition.Back,\r\n  t: FaceletDefinition.Transparent,\r\n  o: FaceletDefinition.Oriented,\r\n  n: FaceletDefinition.Blank,\r\n}\r\n\r\nexport const FaceletToFace: { [facelet: string]: Face } = {\r\n  [FaceletDefinition.Up]: Face.U,\r\n  [FaceletDefinition.Down]: Face.D,\r\n  [FaceletDefinition.Left]: Face.L,\r\n  [FaceletDefinition.Right]: Face.R,\r\n  [FaceletDefinition.Front]: Face.F,\r\n  [FaceletDefinition.Back]: Face.B,\r\n}\r\n\r\nexport const FaceletToColor = {\r\n  [FaceletDefinition.Oriented]: ColorName.Gray,\r\n  [FaceletDefinition.Blank]: ColorCode.DarkGray,\r\n  [FaceletDefinition.Transparent]: ColorName.Transparent,\r\n}\r\n","import { ColorCode } from './../constants'\r\nimport { ICubeColorScheme } from './models/color-scheme'\r\nimport { Axis } from '../..'\r\n\r\nexport enum Face {\r\n  U = 0,\r\n  R = 1,\r\n  F = 2,\r\n  D = 3,\r\n  L = 4,\r\n  B = 5,\r\n}\r\n\r\nexport const AllFaces = [Face.U, Face.R, Face.F, Face.D, Face.L, Face.B]\r\n\r\nexport class FaceRotationVectors {\r\n  static U = [0, -1, 0]\r\n  static R = [1, 0, 0]\r\n  static F = [0, 0, -1]\r\n  static D = [0, 1, 0]\r\n  static L = [-1, 0, 0]\r\n  static B = [0, 0, 1]\r\n}\r\n\r\nexport const DefaultColorScheme: ICubeColorScheme = {\r\n  [Face.U]: ColorCode.Yellow,\r\n  [Face.R]: ColorCode.Red,\r\n  [Face.F]: ColorCode.Blue,\r\n  [Face.D]: ColorCode.White,\r\n  [Face.L]: ColorCode.Orange,\r\n  [Face.B]: ColorCode.Green,\r\n}\r\n\r\nexport const JapaneseColorScheme: ICubeColorScheme = {\r\n  [Face.U]: ColorCode.Blue,\r\n  [Face.R]: ColorCode.Orange,\r\n  [Face.F]: ColorCode.Green,\r\n  [Face.D]: ColorCode.White,\r\n  [Face.L]: ColorCode.Red,\r\n  [Face.B]: ColorCode.Yellow,\r\n}\r\n\r\nexport enum AlgorithmUnit {\r\n  F = 'F',\r\n  U = 'U',\r\n  R = 'R',\r\n  L = 'L',\r\n  D = 'D',\r\n  B = 'B',\r\n  M = 'M',\r\n  E = 'E',\r\n  S = 'S',\r\n  X = 'x',\r\n  Y = 'y',\r\n  Z = 'z',\r\n}\r\n\r\nexport const AxisSymbolToAxis = {\r\n  x: Axis.X,\r\n  y: Axis.Y,\r\n  z: Axis.Z,\r\n}\r\n\r\nexport const possibleMoves: string[] = [\r\n  AlgorithmUnit.F,\r\n  AlgorithmUnit.U,\r\n  AlgorithmUnit.R,\r\n  AlgorithmUnit.L,\r\n  AlgorithmUnit.D,\r\n  AlgorithmUnit.B,\r\n  AlgorithmUnit.M,\r\n  AlgorithmUnit.E,\r\n  AlgorithmUnit.S,\r\n  AlgorithmUnit.X,\r\n  AlgorithmUnit.Y,\r\n  AlgorithmUnit.Z,\r\n]\r\n\r\nexport const cubeRotations: string[] = [AlgorithmUnit.X, AlgorithmUnit.Y, AlgorithmUnit.Z]\r\n\r\nexport enum TurnAbbreviation {\r\n  Clockwise = '',\r\n  CounterClockwise = \"'\",\r\n  Double = '2',\r\n}\r\n\r\nexport enum Masking {\r\n  FL = 'fl',\r\n  F2L = 'f2l',\r\n  LL = 'll',\r\n  CLL = 'cll',\r\n  ELL = 'ell',\r\n  OLL = 'oll',\r\n  OCLL = 'ocll',\r\n  OELL = 'oell',\r\n  COLL = 'coll',\r\n  OCELL = 'ocell',\r\n  WV = 'wv',\r\n  VH = 'vh',\r\n  ELS = 'els',\r\n  CLS = 'cls',\r\n  CMLL = 'cmll',\r\n  CROSS = 'cross',\r\n  F2L3 = 'f2l_3',\r\n  F2L2 = 'f2l_2',\r\n  F2LSM = 'f2l_sm',\r\n  F2L1 = 'f2l_1',\r\n  F2B = 'f2b',\r\n  LINE = 'line',\r\n}\r\n","/**\r\n * Methods for manipulating points in 3d space (Vec3)\r\n */\r\n\r\nexport type Vec3 = [number, number, number]\r\n\r\nexport enum Axis {\r\n  X = 0,\r\n  Y = 1,\r\n  Z = 2,\r\n}\r\n\r\nexport function makeMatrix<T>(rows: number, cols: number): T[][] {\r\n  let matrix: T[][] = []\r\n  for (let r = 0; r < rows; r++) {\r\n    matrix[r] = []\r\n    for (let c = 0; c < cols; c++) {\r\n      matrix[r][c] = null\r\n    }\r\n  }\r\n  return matrix\r\n}\r\n\r\nexport function translate(pos: Vec3, v: Vec3): Vec3 {\r\n  return pos.map((value, index) => value + v[index]) as Vec3\r\n}\r\n\r\nexport function scale(pos: Vec3, scalar: number): Vec3 {\r\n  return pos.map(v => v * scalar) as Vec3\r\n}\r\n\r\n// Scale a point relative to position vector\r\nexport function transScale(pos: Vec3, v: Vec3, scalar: number): Vec3 {\r\n  // Translate each facelet to cf\r\n  let iv: Vec3 = v.map(x => -x) as Vec3\r\n  return translate(scale(translate(pos, iv), scalar), v)\r\n}\r\n\r\nexport function rotate(pos: Vec3, axis: Axis, radians: number): Vec3 {\r\n  let newPosition: Vec3 = [...pos] as Vec3\r\n  switch (axis) {\r\n    case Axis.X:\r\n      newPosition[2] = pos[2] * Math.cos(radians) - pos[1] * Math.sin(radians)\r\n      newPosition[1] = pos[2] * Math.sin(radians) + pos[1] * Math.cos(radians)\r\n      break\r\n    case Axis.Y:\r\n      newPosition[0] = pos[0] * Math.cos(radians) + pos[2] * Math.sin(radians)\r\n      newPosition[2] = -pos[0] * Math.sin(radians) + pos[2] * Math.cos(radians)\r\n      break\r\n    case Axis.Z:\r\n      newPosition[0] = pos[0] * Math.cos(radians) - pos[1] * Math.sin(radians)\r\n      newPosition[1] = pos[0] * Math.sin(radians) + pos[1] * Math.cos(radians)\r\n      break\r\n  }\r\n  return newPosition\r\n}\r\n\r\nexport function project(pos: Vec3, d: number): Vec3 {\r\n  return [\r\n    (pos[0] * d) / pos[2],\r\n    (pos[1] * d) / pos[2],\r\n    pos[2], // Maintain z coordinate to allow use of rendering tricks\r\n  ]\r\n}\r\n\r\nexport function radians2Degrees(radians: number) {\r\n  return (radians * 180) / Math.PI\r\n}\r\n","import { ICubeOptions } from './options'\r\n/**\r\n * Utlity Methods for creating 2D coodinates for svg polygons\r\n */\r\n\r\nimport { Face, AllFaces } from './constants'\r\nimport { Vec3, makeMatrix, translate, scale, rotate, project, Axis } from '../math'\r\n\r\nexport type FaceStickers = Vec3[][]\r\nexport type CubeGeometry = { [face: number]: Vec3[][] }\r\n\r\n/**\r\n * Rotation vectors by face\r\n */\r\nexport type FaceRotations = { [face: number]: Vec3 }\r\n\r\n/**\r\n * Applies set of rotations to all face rotation vectors.\r\n */\r\nexport function rotateFaces(faceRotations: FaceRotations, rotations: [Axis, number][]): FaceRotations {\r\n  return AllFaces.reduce((acc, face) => {\r\n    rotations.forEach(rotation => {\r\n      if (!acc[face]) {\r\n        acc[face] = [...faceRotations[face]]\r\n      }\r\n      acc[face] = rotate(acc[face], rotation[0], (Math.PI * rotation[1]) / 180)\r\n    })\r\n    return acc\r\n  }, {})\r\n}\r\n\r\nexport function makeStickerPosition(face: Face, cubeSize: number, x: number, y: number): Vec3 {\r\n  switch (face) {\r\n    case Face.U:\r\n      return [x, 0, cubeSize - y]\r\n    case Face.R:\r\n      return [cubeSize, y, x]\r\n    case Face.F:\r\n      return [x, y, 0]\r\n    case Face.D:\r\n      return [x, cubeSize, y]\r\n    case Face.L:\r\n      return [0, y, cubeSize - x]\r\n    case Face.B:\r\n      return [cubeSize - x, y, cubeSize]\r\n    default:\r\n      throw new Error(`Unknown cube face: '${face}'`)\r\n  }\r\n}\r\n\r\n/**\r\n * Creates 2D coordinates for stickers of a given face of the cube.\r\n */\r\nexport function makeFaceStickers(face: Face, options: ICubeOptions): FaceStickers {\r\n  let stickers: Vec3[][] = makeMatrix<Vec3>(options.cubeSize + 1, options.cubeSize + 1)\r\n\r\n  for (let row = 0; row <= options.cubeSize; row++) {\r\n    for (let col = 0; col <= options.cubeSize; col++) {\r\n      let sticker = makeStickerPosition(face, options.cubeSize, row, col)\r\n\r\n      // Now scale and tranform point to ensure size/pos independent of dim\r\n      let centerTranslation: Vec3 = [-options.cubeSize / 2, -options.cubeSize / 2, -options.cubeSize / 2]\r\n      sticker = translate(sticker, centerTranslation)\r\n      sticker = scale(sticker, 1 / options.cubeSize)\r\n\r\n      // Rotate cube as per perameter settings\r\n      options.viewportRotations.forEach(rotation => {\r\n        sticker = rotate(sticker, rotation[0], (Math.PI * rotation[1]) / 180)\r\n      })\r\n\r\n      // Move cube away from viewer\r\n      sticker = translate(sticker, [0, 0, options.dist])\r\n      // Finally project the 3D points onto 2D\r\n      sticker = project(sticker, options.dist)\r\n\r\n      stickers[row][col] = sticker\r\n    }\r\n  }\r\n\r\n  return stickers\r\n}\r\n\r\n/**\r\n * Creates geometry for rubiks cube stickers. Contains 2D coordinates\r\n * for drawing svg polygons\r\n */\r\nexport function makeCubeGeometry(options: ICubeOptions): CubeGeometry {\r\n  if (options.view === 'plan') {\r\n    options.viewportRotations = [[Axis.X, -90]]\r\n  }\r\n  return AllFaces.reduce(\r\n    (acc, face) => {\r\n      acc[face] = makeFaceStickers(face, options)\r\n      return acc\r\n    },\r\n    {} as CubeGeometry\r\n  )\r\n}\r\n","import { ColorAbbreviationToCode, ColorNameToCode, ColorCode } from '../../constants'\r\n\r\nexport function parseColor(raw: string): string | ColorCode {\r\n  let colorcodeRegex = /^[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/\r\n\r\n  // Append # for color codes\r\n  if (colorcodeRegex.exec(raw)) {\r\n    return `#${raw}`\r\n  }\r\n\r\n  if (ColorAbbreviationToCode[raw]) {\r\n    return ColorAbbreviationToCode[raw]\r\n  }\r\n\r\n  if (ColorNameToCode[raw]) {\r\n    return ColorNameToCode[raw]\r\n  }\r\n\r\n  // Default color\r\n  return ColorCode.Gray\r\n}\r\n","import { StickerDefinition } from '../models/sticker'\r\nimport { Arrow } from '../models/arrow'\r\nimport { Face } from '../constants'\r\nimport { ColorCode, ColorName } from '../../constants'\r\nimport { parseColor } from './color'\r\n\r\nconst stickerPattern = '([URFDLB])([0-9]+)'\r\nconst colorPattern =\r\n  '(black|dgrey|grey|silver|white|yellow|red|orange|blue|green|purple|pink|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})'\r\nconst arrowPattern = `^(${stickerPattern})(${stickerPattern})(${stickerPattern})?(-s([0-9+]))?(-i([0-9+]))?(-${colorPattern})?`\r\n\r\nexport function parseArrows(raw: string): Arrow[] {\r\n  if (typeof raw !== 'string') {\r\n    return []\r\n  }\r\n\r\n  return raw\r\n    .split(',')\r\n    .map(part => parseArrow(part))\r\n    .filter(arrow => !!arrow)\r\n}\r\n\r\nexport function parseArrow(raw: string): Arrow {\r\n  if (typeof raw !== 'string') {\r\n    return null\r\n  }\r\n\r\n  let arrowRegex = new RegExp(arrowPattern)\r\n  let match = arrowRegex.exec(raw)\r\n\r\n  if (!match) {\r\n    return null\r\n  }\r\n\r\n  return <Arrow>{\r\n    s1: {\r\n      face: Face[match[2]],\r\n      n: parseInt(match[3]),\r\n    },\r\n    s2: {\r\n      face: Face[match[5]],\r\n      n: parseInt(match[6]),\r\n    },\r\n    s3: !match[7]\r\n      ? undefined\r\n      : {\r\n          face: Face[match[8]],\r\n          n: parseInt(match[9]),\r\n        },\r\n    color: match[15] ? parseColor(match[15]) : ColorCode.Gray,\r\n    scale: match[11] ? parseInt(match[11]) : 10,\r\n    influence: match[13] ? parseInt(match[13]) : 10,\r\n  }\r\n}\r\n","import React, { ComponentType, FC } from 'react'\r\nimport { Svg, Polygon, G, Path, Rect } from 'react-native-svg'\r\nimport { ColorName, FaceletToFace, FaceletToColor, ColorCode } from '../constants'\r\nimport { CubeGeometry, FaceStickers, FaceRotations, rotateFaces } from './geometry'\r\nimport { Vec3, transScale, scale, translate, radians2Degrees } from '../math'\r\nimport { Face, AllFaces } from './constants'\r\nimport { ICubeOptions } from './options'\r\nimport { Arrow } from './models/arrow'\r\nimport { parseArrows } from './parsing/arrow'\r\n\r\n/**\r\n * Utility methods for rendering cube geometry using svg.js\r\n */\r\n\r\n// Rotation vectors to track visibility of each face\r\nconst defaultFaceRotations: FaceRotations = {\r\n  [Face.U]: [0, -1, 0],\r\n  [Face.R]: [1, 0, 0],\r\n  [Face.F]: [0, 0, -1],\r\n  [Face.D]: [0, 1, 1],\r\n  [Face.L]: [-1, 0, 0],\r\n  [Face.B]: [0, 0, 1],\r\n}\r\n\r\nfunction viewBox(x: number, y: number, width: number, height: number) {\r\n  return `${x} ${y} ${width} ${height}`\r\n}\r\n\r\nfunction polygonPoints(points: number[][]) {\r\n  return points.map(point => point.join(',')).join(' ')\r\n}\r\n\r\n/**\r\n * Determines face render order based on z position. Faces further away\r\n * will render first so anything closer will be drawn on top.\r\n */\r\nfunction getRenderOrder(faceRotations: FaceRotations): Face[] {\r\n  let renderOrder = [...AllFaces].sort((a: Face, b: Face) => {\r\n    return faceRotations[b][2] - faceRotations[a][2]\r\n  })\r\n  return renderOrder\r\n}\r\n\r\nconst Background: FC<{ options: ICubeOptions }> = ({ options }) => {\r\n  let fill: string\r\n  let fillOpacity: number | undefined = undefined\r\n\r\n  if (!options.backgroundColor) {\r\n    fill = 'none'\r\n    fillOpacity = 0\r\n  } else {\r\n    fill = options.backgroundColor\r\n  }\r\n\r\n  return <Rect {...options.viewbox} fill={fill} fillOpacity={fillOpacity} />\r\n}\r\n\r\nfunction faceVisible(face: Face, rotations: FaceRotations) {\r\n  return rotations[face][2] < -0.105\r\n}\r\n\r\nconst CubeOutlineGroup: FC<{ options: ICubeOptions }> = ({ options, children }) => {\r\n  return <G opacity={options.cubeOpacity / 100} strokeWidth={0.1} strokeLinejoin=\"round\" children={children} />\r\n}\r\n\r\nconst OllLayerGroup: FC<{ options: ICubeOptions }> = ({ options, children }) => {\r\n  return (\r\n    <G\r\n      opacity={options.stickerOpacity / 100}\r\n      strokeOpacity={1}\r\n      strokeWidth={0.02}\r\n      strokeLinejoin=\"round\"\r\n      children={children}\r\n    />\r\n  )\r\n}\r\n\r\nconst ArrowGroup: FC<{ cubeSize: number }> = ({ cubeSize, children }) => {\r\n  return <G opacity={1} strokeOpacity={1} strokeWidth={0.12 / cubeSize} strokeLinecap=\"round\" children={children} />\r\n}\r\n\r\nconst CubeOutline: FC<{ face: FaceStickers; options: ICubeOptions }> = ({ face, options }) => {\r\n  const cubeSize = face.length - 1\r\n  const width = options.outlineWidth\r\n  let outlinePoints = [\r\n    [face[0][0][0] * width, face[0][0][1] * width],\r\n    [face[cubeSize][0][0] * width, face[cubeSize][0][1] * width],\r\n    [face[cubeSize][cubeSize][0] * width, face[cubeSize][cubeSize][1] * width],\r\n    [face[0][cubeSize][0] * width, face[0][cubeSize][1] * width],\r\n  ]\r\n\r\n  return <Polygon fill={options.cubeColor} stroke={options.cubeColor} points={polygonPoints(outlinePoints)} />\r\n}\r\n\r\nexport const FaceStickersSvg: FC<{ face: Face; stickers: FaceStickers; options: ICubeOptions }> = ({\r\n  face,\r\n  stickers,\r\n  options,\r\n}) => {\r\n  const cubeSize = stickers.length - 1\r\n\r\n  const stickerElements: JSX.Element[] = []\r\n\r\n  for (let i = 0; i < cubeSize; i++) {\r\n    for (let j = 0; j < cubeSize; j++) {\r\n      let centerPoint: Vec3 = [\r\n        (stickers[j][i][0] + stickers[j + 1][i + 1][0]) / 2,\r\n        (stickers[j][i][1] + stickers[j + 1][i + 1][1]) / 2,\r\n        0,\r\n      ]\r\n\r\n      // Scale points in towards centre\r\n      let p1 = transScale(stickers[j][i], centerPoint, 0.85)\r\n      let p2 = transScale(stickers[j + 1][i], centerPoint, 0.85)\r\n      let p3 = transScale(stickers[j + 1][i + 1], centerPoint, 0.85)\r\n      let p4 = transScale(stickers[j][i + 1], centerPoint, 0.85)\r\n\r\n      let color = getStickerColor(face, i, j, options)\r\n      if (color !== ColorName.Transparent) {\r\n        stickerElements.push(\r\n          <Sticker key={`${i},${j}`} {...{ p1, p2, p3, p4 }} stickerColor={color} cubeColor={options.cubeColor} />\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <G\r\n      opacity={options.stickerOpacity / 100}\r\n      strokeOpacity={0.5}\r\n      strokeWidth={options.strokeWidth}\r\n      strokeLinejoin=\"round\"\r\n      children={stickerElements}\r\n    />\r\n  )\r\n}\r\n\r\nconst Sticker: ComponentType<{\r\n  p1: Vec3\r\n  p2: Vec3\r\n  p3: Vec3\r\n  p4: Vec3\r\n  stickerColor: string\r\n  cubeColor: string\r\n}> = props => {\r\n  const { p1, p2, p3, p4, stickerColor, cubeColor } = props\r\n  let stickerPoints = [[p1[0], p1[1]], [p2[0], p2[1]], [p3[0], p3[1]], [p4[0], p4[1]]]\r\n\r\n  return <Polygon fill={stickerColor} stroke={cubeColor} points={polygonPoints(stickerPoints)} />\r\n}\r\n\r\n/**\r\n * Starting with U, stickers are numbered from\r\n * their face starting with the top left corner\r\n * sticker.\r\n *\r\n * U Face\r\n * 1 | 2 | 3\r\n * ----------\r\n * 4 | 5 | 6\r\n * ----------\r\n * 7 | 8 | 9\r\n *\r\n * And so on for faces R, F, D, L, B.\r\n * So R's top left corner for a 3x3 cube would be # 10\r\n *\r\n * An individual sticker's color is obtained by indexing\r\n * into the array of sticker colors by the number the sticker is\r\n */\r\nfunction getStickerColor(face: Face, row: number, col: number, options: ICubeOptions): string {\r\n  const faceIndex = AllFaces.indexOf(face)\r\n  const stickerNumber = row * options.cubeSize + col\r\n  const colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber\r\n\r\n  if (!Array.isArray(options.facelets) && Array.isArray(options.stickerColors)) {\r\n    if (options.stickerColors.length <= colorIndex) {\r\n      return ColorName.Black\r\n    }\r\n\r\n    return options.stickerColors[colorIndex]\r\n  } else if (Array.isArray(options.facelets)) {\r\n    if (options.facelets.length <= colorIndex) {\r\n      return ColorCode.DarkGray\r\n    }\r\n\r\n    let fd = options.facelets[colorIndex]\r\n    if (FaceletToFace[fd] != null) {\r\n      const face = FaceletToFace[fd]\r\n      return options.colorScheme[face]\r\n    }\r\n\r\n    return FaceletToColor[fd] || ColorCode.DarkGray\r\n  } else {\r\n    return options.colorScheme[face] || ColorName.Black\r\n  }\r\n}\r\n\r\n// Renders the top rim of the R U L and B faces out from side of cube\r\nexport const OLLStickers: FC<{\r\n  face: Face\r\n  stickers: FaceStickers\r\n  rotations: FaceRotations\r\n  options: ICubeOptions\r\n}> = props => {\r\n  const { face, stickers, rotations, options } = props\r\n\r\n  const stickerElements = []\r\n\r\n  // Translation vector, to move faces out\r\n  let v1 = scale(rotations[face], 0)\r\n  let v2 = scale(rotations[face], 0.2)\r\n  for (let i = 0; i < options.cubeSize; i++) {\r\n    // find center point of sticker\r\n    const centerPoint: Vec3 = [\r\n      (stickers[i][0][0] + stickers[i + 1][1][0]) / 2,\r\n      (stickers[i][0][1] + stickers[i + 1][1][1]) / 2,\r\n      0,\r\n    ]\r\n    let p1 = translate(transScale(stickers[i][0], centerPoint, 0.94), v1)\r\n    let p2 = translate(transScale(stickers[i + 1][0], centerPoint, 0.94), v1)\r\n    let p3 = translate(transScale(stickers[i + 1][1], centerPoint, 0.94), v2)\r\n    let p4 = translate(transScale(stickers[i][1], centerPoint, 0.94), v2)\r\n\r\n    let stickerColor = getStickerColor(face, 0, i, options)\r\n\r\n    if (stickerColor !== ColorName.Transparent) {\r\n      stickerElements.push(<Sticker key={i} {...{ p1, p2, p3, p4, stickerColor }} cubeColor={options.cubeColor} />)\r\n    }\r\n  }\r\n\r\n  return <>{stickerElements}</>\r\n}\r\n\r\n/**\r\n * Generates svg for an arrow pointing from sticker s1 to s2\r\n */\r\nexport const ArrowSvg: FC<{ geometry: CubeGeometry; arrow: Arrow }> = ({ geometry, arrow }) => {\r\n  let cubeSize = geometry[0].length - 1\r\n\r\n  // Find center point for each facelet\r\n  let p1y = Math.floor(arrow.s1.n / cubeSize)\r\n  let p1x = arrow.s1.n % cubeSize\r\n  let p1: Vec3 = [\r\n    (geometry[arrow.s1.face][p1x][p1y][0] + geometry[arrow.s1.face][p1x + 1][p1y + 1][0]) / 2,\r\n    (geometry[arrow.s1.face][p1x][p1y][1] + geometry[arrow.s1.face][p1x + 1][p1y + 1][1]) / 2,\r\n    0,\r\n  ]\r\n\r\n  let p2y = Math.floor(arrow.s2.n / cubeSize)\r\n  let p2x = arrow.s2.n % cubeSize\r\n  let p2: Vec3 = [\r\n    (geometry[arrow.s1.face][p2x][p2y][0] + geometry[arrow.s1.face][p2x + 1][p2y + 1][0]) / 2,\r\n    (geometry[arrow.s1.face][p2x][p2y][1] + geometry[arrow.s1.face][p2x + 1][p2y + 1][1]) / 2,\r\n    0,\r\n  ]\r\n\r\n  // Find midpoint between p1 and p2\r\n  let center: Vec3 = [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2, 0]\r\n\r\n  // Shorten arrows towards midpoint according to config\r\n  p1 = transScale(p1, center, arrow.scale / 10)\r\n  p2 = transScale(p2, center, arrow.scale / 10)\r\n\r\n  let p3: Vec3\r\n  if (arrow.s3) {\r\n    let p3y = Math.floor(arrow.s3.n / cubeSize)\r\n    let p3x = arrow.s3.n % cubeSize\r\n    p3 = [\r\n      (geometry[arrow.s1.face][p3x][p3y][0] + geometry[arrow.s1.face][p3x + 1][p3y + 1][0]) / 2,\r\n      (geometry[arrow.s1.face][p3x][p3y][1] + geometry[arrow.s1.face][p3x + 1][p3y + 1][1]) / 2,\r\n      0,\r\n    ]\r\n    p3 = transScale(p3, center, arrow.influence / 5)\r\n  }\r\n\r\n  // Calculate arrow rotation\r\n  let p_ = p3 ? p3 : p1\r\n  let rotation = p_[1] > p2[1] ? 270 : 90\r\n  if (p2[0] - p_[0] != 0) {\r\n    rotation = radians2Degrees(Math.atan((p2[1] - p_[1]) / (p2[0] - p_[0])))\r\n    rotation = p_[0] > p2[0] ? rotation + 180 : rotation\r\n  }\r\n\r\n  // Draw line\r\n  let lineSvg = (\r\n    <Path\r\n      d={`M ${p1[0]},${p1[1]} ${p3 ? 'Q ' + p3[0] + ',' + p3[1] : 'L'} ${p2[0]},${p2[1]}`}\r\n      fill=\"none\"\r\n      stroke={arrow.color}\r\n      strokeOpacity={1}\r\n    />\r\n  )\r\n\r\n  // Draw arrow head\r\n  let headSvg = (\r\n    <Path\r\n      d=\"M 5.77,0.0 L -2.88,5.0 L -2.88,-5.0 L 5.77,0.0 z\"\r\n      translate={[p2[0], p2[1]]}\r\n      scale={0.033 / cubeSize}\r\n      rotation={rotation}\r\n      fill={arrow.color}\r\n      strokeWidth={0}\r\n      strokeLinejoin=\"round\"\r\n    />\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {lineSvg}\r\n      {headSvg}\r\n    </>\r\n  )\r\n}\r\n\r\nexport const Cube: FC<{ geometry: CubeGeometry; options: ICubeOptions }> = ({ geometry, options }) => {\r\n  let faceRotations = rotateFaces(defaultFaceRotations, options.viewportRotations)\r\n  let renderOrder = getRenderOrder(faceRotations)\r\n\r\n  let hiddenFaces = renderOrder.filter(face => !faceVisible(face, faceRotations))\r\n  let visibleFaces = renderOrder.filter(face => faceVisible(face, faceRotations))\r\n\r\n  let arrowDefinitions: Arrow[] = []\r\n\r\n  if (Array.isArray(options.arrows)) {\r\n    arrowDefinitions = options.arrows\r\n  } else if (typeof options.arrows === 'string') {\r\n    arrowDefinitions = parseArrows(options.arrows)\r\n  }\r\n\r\n  return (\r\n    <Svg\r\n      width={options.width}\r\n      height={options.height}\r\n      viewBox={viewBox(options.viewbox.x, options.viewbox.y, options.viewbox.width, options.viewbox.height)}\r\n    >\r\n      <Background options={options} />\r\n      {options.cubeOpacity < 100 && (\r\n        <>\r\n          <CubeOutlineGroup options={options}>\r\n            {hiddenFaces.map((face, index) => (\r\n              <CubeOutline key={index} face={geometry[face]} options={options} />\r\n            ))}\r\n          </CubeOutlineGroup>\r\n          {hiddenFaces.map((face, index) => (\r\n            <FaceStickersSvg key={index} face={face} stickers={geometry[face]} options={options} />\r\n          ))}\r\n        </>\r\n      )}\r\n\r\n      <CubeOutlineGroup options={options}>\r\n        {visibleFaces.map((face, index) => (\r\n          <CubeOutline key={index} face={geometry[face]} options={options} />\r\n        ))}\r\n      </CubeOutlineGroup>\r\n\r\n      {visibleFaces.map((face, index) => (\r\n        <FaceStickersSvg key={index} face={face} stickers={geometry[face]} options={options} />\r\n      ))}\r\n\r\n      {options.view === 'plan' && (\r\n        <OllLayerGroup options={options}>\r\n          {[Face.R, Face.F, Face.L, Face.B].map((face, index) => (\r\n            <OLLStickers key={index} face={face} stickers={geometry[face]} rotations={faceRotations} options={options} />\r\n          ))}\r\n        </OllLayerGroup>\r\n      )}\r\n\r\n      <ArrowGroup cubeSize={geometry[0].length - 1}>\r\n        {arrowDefinitions.map((arrow, index) => (\r\n          <ArrowSvg key={index} geometry={geometry} arrow={arrow} />\r\n        ))}\r\n      </ArrowGroup>\r\n    </Svg>\r\n  )\r\n}\r\n","import { Masking, Face, AllFaces } from './constants'\r\n\r\ntype FaceValues = { [face: number]: any[] }\r\ntype MaskingFunctions = {\r\n  [masking: string]: {\r\n    [face: number]: (row: number, col: number, cubeSize: number) => boolean\r\n  }\r\n}\r\n\r\nconst maskingFunctions: MaskingFunctions = {\r\n  [Masking.FL]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row == cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row == cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row == cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row == cubeSize - 1,\r\n  },\r\n  [Masking.F2L]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.LL]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => row == 0,\r\n    [Face.L]: (row, col, cubeSize) => row == 0,\r\n    [Face.F]: (row, col, cubeSize) => row == 0,\r\n    [Face.B]: (row, col, cubeSize) => row == 0,\r\n  },\r\n  [Masking.CLL]: {\r\n    [Face.U]: (row, col, cubeSize) =>\r\n      (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\r\n      ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.L]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.F]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.B]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n  },\r\n  [Masking.ELL]: {\r\n    [Face.U]: (row, col, cubeSize) => !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n  },\r\n  [Masking.OLL]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => false,\r\n    [Face.L]: (row, col, cubeSize) => false,\r\n    [Face.F]: (row, col, cubeSize) => false,\r\n    [Face.B]: (row, col, cubeSize) => false,\r\n  },\r\n  [Masking.OCLL]: {\r\n    [Face.U]: (row, col, cubeSize) =>\r\n      (row > 0 && col > 0 && row < cubeSize - 1 && col < cubeSize - 1) || // is center\r\n      ((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => false,\r\n    [Face.L]: (row, col, cubeSize) => false,\r\n    [Face.F]: (row, col, cubeSize) => false,\r\n    [Face.B]: (row, col, cubeSize) => false,\r\n  },\r\n  [Masking.OELL]: {\r\n    [Face.U]: (row, col, cubeSize) => !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => false,\r\n    [Face.L]: (row, col, cubeSize) => false,\r\n    [Face.F]: (row, col, cubeSize) => false,\r\n    [Face.B]: (row, col, cubeSize) => false,\r\n  },\r\n  [Masking.COLL]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.L]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.F]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.B]: (row, col, cubeSize) => row == 0 && (col == 0 || col == cubeSize - 1),\r\n  },\r\n  [Masking.OCELL]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => false,\r\n    [Face.R]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row == 0 && col > 0 && col < cubeSize - 1,\r\n  },\r\n  [Masking.WV]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.VH]: {\r\n    [Face.U]: (row, col, cubeSize) => !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.ELS]: {\r\n    [Face.U]: (row, col, cubeSize) => !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.D]: (row, col, cubeSize) => (row == 0 ? col < cubeSize - 1 : true),\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && (row == cubeSize - 1 ? col > 0 : true),\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && (row == cubeSize - 1 ? col < cubeSize - 1 : true),\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.CLS]: {\r\n    [Face.U]: (row, col, cubeSize) => true,\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.CMLL]: {\r\n    [Face.U]: (row, col, cubeSize) => (row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1),\r\n    [Face.D]: (row, col, cubeSize) => true,\r\n    [Face.R]: (row, col, cubeSize) => row > 0 || col == 0 || col == cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row > 0 || col == 0 || col == cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => col == 0 || col == cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => col == 0 || col == cubeSize - 1,\r\n  },\r\n  [Masking.CROSS]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n  },\r\n  [Masking.F2L3]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) =>\r\n      (row == 0 && col == cubeSize - 1) || !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)),\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && col < cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n  },\r\n  [Masking.F2L2]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => row > 0 || (col > 0 && col < cubeSize - 1),\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && col > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.F2LSM]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) =>\r\n      !((row == 0 || row == cubeSize - 1) && (col == 0 || col == cubeSize - 1)) ||\r\n      (col == 0 && row == cubeSize - 1) ||\r\n      (row == 0 && col == cubeSize - 1),\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && col < cubeSize - 1,\r\n    [Face.L]: (row, col, cubeSize) => row > 0 && col < cubeSize - 1,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col > 0,\r\n    [Face.B]: (row, col, cubeSize) => row > 0 && col > 0,\r\n  },\r\n  [Masking.F2L1]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => row !== 0 || col !== cubeSize - 1,\r\n    [Face.R]: (row, col, cubeSize) => row > 0 && col > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row > 0,\r\n  },\r\n  [Masking.F2B]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => col == 0 || col == cubeSize - 1,\r\n    [Face.R]: (row, col, cubeSize) => row > 0,\r\n    [Face.L]: (row, col, cubeSize) => row > 0,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && (col == 0 || col == cubeSize - 1),\r\n    [Face.B]: (row, col, cubeSize) => row > 0 && (col == 0 || col == cubeSize - 1),\r\n  },\r\n  [Masking.LINE]: {\r\n    [Face.U]: (row, col, cubeSize) => false,\r\n    [Face.D]: (row, col, cubeSize) => col > 0 && col < cubeSize - 1,\r\n    [Face.R]: (row, col, cubeSize) => false,\r\n    [Face.L]: (row, col, cubeSize) => false,\r\n    [Face.F]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n    [Face.B]: (row, col, cubeSize) => row > 0 && col > 0 && col < cubeSize - 1,\r\n  },\r\n}\r\n\r\nexport function makeMasking(masking: Masking, cubeSize: number): FaceValues {\r\n  if (!maskingFunctions[masking]) {\r\n    throw new Error(`invalid masking ${masking}`)\r\n  }\r\n\r\n  let numStickers = cubeSize * cubeSize\r\n  let faceValues = {\r\n    [Face.U]: [],\r\n    [Face.F]: [],\r\n    [Face.R]: [],\r\n    [Face.D]: [],\r\n    [Face.L]: [],\r\n    [Face.B]: [],\r\n  }\r\n\r\n  for (let i = 0; i < numStickers; i++) {\r\n    let row = Math.floor(i / cubeSize)\r\n    let col = i % cubeSize\r\n\r\n    AllFaces.forEach(face => {\r\n      faceValues[face].push(maskingFunctions[masking][face](row, col, cubeSize))\r\n    })\r\n  }\r\n\r\n  return faceValues\r\n}\r\n","import { Axis } from './../math'\r\nimport { AllFaces, Face, AlgorithmUnit } from './constants'\r\nimport { Turn } from './parsing/algorithm'\r\n\r\nexport enum TurnType {\r\n  Clockwise,\r\n  CounterClockwise,\r\n  Double,\r\n}\r\n\r\n// Given sticker N return sticker number after rotation\r\ntype FaceRotation = (stickerNumber: number, cubeSize: number) => number\r\n\r\nconst faceIdentity: FaceRotation = (stickerNumber: number, cubeSize: number) => stickerNumber\r\nconst counterClockwiseSticker: FaceRotation = (stickerNumber, cubeSize) =>\r\n  (stickerNumber * cubeSize) % (cubeSize * cubeSize + 1)\r\nconst clockwiseSticker: FaceRotation = (stickerNumber, cubeSize) => {\r\n  let numStickers = cubeSize * cubeSize\r\n  return numStickers + 1 - counterClockwiseSticker(stickerNumber, cubeSize)\r\n}\r\nconst doubleTurn: FaceRotation = (stickerNumber, cubeSize) => {\r\n  return cubeSize * cubeSize - stickerNumber + 1\r\n}\r\n\r\nconst OppositeTurn = {\r\n  [TurnType.Clockwise]: TurnType.CounterClockwise,\r\n  [TurnType.CounterClockwise]: TurnType.Clockwise,\r\n  [TurnType.Double]: TurnType.Double,\r\n}\r\n\r\n// Faces that wrap around a given axis\r\nconst AxisMapping = {\r\n  [Axis.X]: [Face.U, Face.B, Face.F, Face.D],\r\n  [Axis.Y]: [Face.L, Face.B, Face.R, Face.F],\r\n  [Axis.Z]: [Face.L, Face.U, Face.R, Face.D],\r\n}\r\n\r\n// Face's orientation related to other faces on a given axis\r\nconst AxisOrientation: { [axis: number]: { [face: number]: FaceRotation } } = {\r\n  [Axis.X]: {\r\n    [Face.U]: faceIdentity,\r\n    [Face.B]: doubleTurn,\r\n    [Face.F]: faceIdentity,\r\n    [Face.D]: faceIdentity,\r\n    [Face.L]: null,\r\n    [Face.R]: null,\r\n  },\r\n  [Axis.Y]: {\r\n    [Face.U]: null,\r\n    [Face.B]: counterClockwiseSticker,\r\n    [Face.F]: counterClockwiseSticker,\r\n    [Face.D]: null,\r\n    [Face.L]: counterClockwiseSticker,\r\n    [Face.R]: counterClockwiseSticker,\r\n  },\r\n  [Axis.Z]: {\r\n    [Face.U]: counterClockwiseSticker,\r\n    [Face.B]: null,\r\n    [Face.F]: null,\r\n    [Face.D]: clockwiseSticker,\r\n    [Face.L]: faceIdentity,\r\n    [Face.R]: doubleTurn,\r\n  },\r\n}\r\n\r\nexport class CubeData {\r\n  /**\r\n   *  Data to store face value\r\n   *  data saved in flat array [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n   *  maps to cube stickers like this\r\n   *\r\n   *  U Face\r\n   *  1 | 2 | 3\r\n   *  ----------\r\n   *  4 | 5 | 6\r\n   *  ----------\r\n   *  7 | 8 | 9\r\n   *\r\n   *  Stickers are numbered in that manner starting with the U face\r\n   *  continuing with this order U, R, F, D, L, B\r\n   *\r\n   *  Because each face has a differen't orientation it may not be clear\r\n   *  how the back faces are numbered. Below is an example 3x3 mapping\r\n   *\r\n   *  Example numbers of 3x3 cube. nxn cubes follow the same pattern\r\n   *\r\n   *        B\r\n   *      L U R\r\n   *        F\r\n   *        D\r\n   *                  | 54  | 53  | 52  |\r\n   *                   -----------------\r\n   *                  | 51  | 50  | 49  |\r\n   *                   -----------------\r\n   *                  | 48  | 47  | 46  |\r\n   * -----------------                   -----------------\r\n   *  43  | 40  | 37     1  |  2  |  3    12  | 15  | 18\r\n   * ----------------- ----------------- -----------------\r\n   *  44  | 41  | 38     4  |  5  |  6    11  | 14  | 17\r\n   * ----------------- ----------------- -----------------\r\n   *  45  | 42  | 39     7  |  8  |  9    10  | 13  | 16\r\n   * -----------------                   -----------------\r\n   *                  | 19  | 20  | 21  |\r\n   *                   -----------------\r\n   *                  | 22  | 23  | 24  |\r\n   *                   -----------------\r\n   *                  | 25  | 26  | 27  |\r\n   *\r\n   *                  | 28  | 29  | 30  |\r\n   *                   -----------------\r\n   *                  | 31  | 32  | 33  |\r\n   *                   -----------------\r\n   *                  | 34  | 35  | 36  |\r\n   */\r\n  public faces: { [face: number]: any[] } = {}\r\n  private numStickers: number\r\n\r\n  // Precalculated index mapping values for face rotations\r\n  private clockwiseMapping: number[]\r\n  private counterClockwiseMapping: number[]\r\n  private doubleMapping: number[]\r\n\r\n  constructor(private cubeSize: number, initialValues?: { [face: number]: any[] }) {\r\n    this.numStickers = this.cubeSize * this.cubeSize\r\n    this.clockwiseMapping = []\r\n    this.counterClockwiseMapping = []\r\n    this.doubleMapping = []\r\n\r\n    this.faces = initialValues\r\n\r\n    if (!this.faces) {\r\n      this.initValues()\r\n    }\r\n\r\n    for (let i = 1; i <= this.numStickers; i++) {\r\n      this.clockwiseMapping.push(clockwiseSticker(i, cubeSize))\r\n      this.counterClockwiseMapping.push(counterClockwiseSticker(i, cubeSize))\r\n      this.doubleMapping.push(doubleTurn(i, cubeSize))\r\n    }\r\n  }\r\n\r\n  private initValues() {\r\n    let currentValue = 1\r\n    AllFaces.forEach(face => {\r\n      this.faces[face] = []\r\n      for (let i = 0; i < this.numStickers; i++) {\r\n        this.faces[face].push(currentValue++)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Rotates values on an outer face of the rubiks cubes\r\n   */\r\n  private rotateFace(face: Face, turn: TurnType) {\r\n    // TODO more efficient rotation to not construct so many new arrays\r\n    switch (turn) {\r\n      case TurnType.Clockwise:\r\n        this.faces[face] = this.clockwiseMapping.map(newStickerNumber => this.faces[face][newStickerNumber - 1])\r\n        break\r\n      case TurnType.CounterClockwise:\r\n        this.faces[face] = this.counterClockwiseMapping.map(newStickerNumber => this.faces[face][newStickerNumber - 1])\r\n        break\r\n      case TurnType.Double:\r\n        this.faces[face].reverse()\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotates layer values around a given axis\r\n   */\r\n  private axisRotation(\r\n    offset: number,\r\n    range: number,\r\n    axis: Axis,\r\n    faceOrder: Face[],\r\n    forward: boolean = true,\r\n    double: boolean = false\r\n  ) {\r\n    if (!forward) {\r\n      faceOrder.reverse()\r\n    }\r\n\r\n    // Copy original values to avoid clobbering values when modifying stickers\r\n    let originalValues = faceOrder.map(face => this.faces[face].slice())\r\n\r\n    // Copy values\r\n    for (let i = 0; i < this.cubeSize; i++) {\r\n      for (let r = 0; r < range; r++) {\r\n        const stickerIndex = this.cubeSize * i + (offset + r)\r\n        for (let j = 0; j < faceOrder.length; j++) {\r\n          const face = faceOrder[j]\r\n          const nextFace = double ? faceOrder[(j + 2) % faceOrder.length] : faceOrder[(j + 1) % faceOrder.length]\r\n          const valueIndex = AxisOrientation[axis][face](stickerIndex + 1, this.cubeSize) - 1\r\n          const nextFaceValueIndex = AxisOrientation[axis][nextFace](stickerIndex + 1, this.cubeSize) - 1\r\n          this.faces[face][valueIndex] =\r\n            originalValues[(double ? j + 2 : j + 1) % originalValues.length][nextFaceValueIndex]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate layers around the x axis of the cube\r\n   */\r\n  private xLayersRotation(offset: number, forward: boolean = true, double: boolean = false, range: number = 1) {\r\n    let faceOrder = [Face.U, Face.F, Face.D, Face.B]\r\n    this.axisRotation(offset, range, Axis.X, faceOrder, forward, double)\r\n  }\r\n\r\n  /**\r\n   * Rotate layers around the y axis of the cube\r\n   */\r\n  private yLayersRotation(offset: number, forward: boolean = true, double: boolean = false, range: number = 1) {\r\n    let faceOrder = [Face.L, Face.F, Face.R, Face.B]\r\n    this.axisRotation(offset, range, Axis.Y, faceOrder, forward, double)\r\n  }\r\n\r\n  /**\r\n   * Rotate layers around the z axis of the cube\r\n   */\r\n  private zLayersRotation(offset: number, forward: boolean = true, double: boolean = false, range: number = 1) {\r\n    let faceOrder = [Face.U, Face.L, Face.D, Face.R]\r\n    this.axisRotation(offset, range, Axis.Z, faceOrder, forward, double)\r\n  }\r\n\r\n  /**\r\n   * Restricts the number of slices used in outer block moves to the cube size\r\n   */\r\n  private safeSlices(n: number): number {\r\n    return n > this.cubeSize ? this.cubeSize : n\r\n  }\r\n\r\n  rTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.R, turnType)\r\n    let offset = this.cubeSize - slices\r\n    this.xLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  lTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.L, turnType)\r\n    this.xLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  uTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.U, turnType)\r\n    this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  dTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.D, turnType)\r\n    let offset = this.cubeSize - slices\r\n    this.yLayersRotation(offset, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  fTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.F, turnType)\r\n    let offset = this.cubeSize - slices\r\n    this.zLayersRotation(offset, turnType === TurnType.Clockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  bTurn(turnType: TurnType, slices: number = 1) {\r\n    this.rotateFace(Face.B, turnType)\r\n    this.zLayersRotation(0, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, slices)\r\n  }\r\n\r\n  mTurn(turnType: TurnType) {\r\n    if (this.cubeSize < 2) return\r\n    this.xLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2)\r\n  }\r\n\r\n  eTurn(turnType: TurnType) {\r\n    if (this.cubeSize < 2) return\r\n    this.yLayersRotation(1, turnType === TurnType.CounterClockwise, turnType === TurnType.Double, this.cubeSize - 2)\r\n  }\r\n\r\n  sTurn(turnType: TurnType) {\r\n    if (this.cubeSize < 2) return\r\n    this.zLayersRotation(1, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize - 2)\r\n  }\r\n\r\n  xTurn(turnType: TurnType) {\r\n    this.rotateFace(Face.R, turnType)\r\n    this.rotateFace(Face.L, OppositeTurn[turnType])\r\n    this.xLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize)\r\n  }\r\n\r\n  yTurn(turnType: TurnType) {\r\n    this.rotateFace(Face.U, turnType)\r\n    this.rotateFace(Face.D, OppositeTurn[turnType])\r\n    this.yLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize)\r\n  }\r\n\r\n  zTurn(turnType: TurnType) {\r\n    this.rotateFace(Face.F, turnType)\r\n    this.rotateFace(Face.B, OppositeTurn[turnType])\r\n    this.zLayersRotation(0, turnType === TurnType.Clockwise, turnType === TurnType.Double, this.cubeSize)\r\n  }\r\n\r\n  turn(turn: Turn) {\r\n    let slices = this.safeSlices(turn.slices)\r\n    switch (turn.move) {\r\n      case AlgorithmUnit.F:\r\n        this.fTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.B:\r\n        this.bTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.U:\r\n        this.uTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.D:\r\n        this.dTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.R:\r\n        this.rTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.L:\r\n        this.lTurn(turn.turnType, slices)\r\n        break\r\n      case AlgorithmUnit.M:\r\n        this.mTurn(turn.turnType)\r\n        break\r\n      case AlgorithmUnit.E:\r\n        this.eTurn(turn.turnType)\r\n        break\r\n      case AlgorithmUnit.S:\r\n        this.sTurn(turn.turnType)\r\n        break\r\n      case AlgorithmUnit.X:\r\n        this.xTurn(turn.turnType)\r\n        break\r\n      case AlgorithmUnit.Y:\r\n        this.yTurn(turn.turnType)\r\n        break\r\n      case AlgorithmUnit.Z:\r\n        this.zTurn(turn.turnType)\r\n        break\r\n      default:\r\n        throw new Error(`Unrecognized move in turn ${JSON.stringify(turn)}`)\r\n    }\r\n  }\r\n}\r\n","import { cubeRotations } from './../constants'\r\nimport { TurnType } from '../simulation'\r\nimport { TurnAbbreviation, AlgorithmUnit, possibleMoves } from '../constants'\r\n\r\nexport interface Turn {\r\n  move: AlgorithmUnit\r\n  turnType: TurnType\r\n  slices: number\r\n}\r\n\r\nconst turnRegex = /([2-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g\r\n\r\nconst Opposite = {\r\n  [TurnType.Clockwise]: TurnType.CounterClockwise,\r\n  [TurnType.CounterClockwise]: TurnType.Clockwise,\r\n  [TurnType.Double]: TurnType.Double,\r\n}\r\n\r\n/**\r\n * Takes in an algorithm string and parses the turns from it\r\n * algorithm string format should be moves separated by a single space\r\n * (ex. \"U R2 L' x\")\r\n *\r\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\r\n */\r\nexport function parseAlgorithm(algorithm: string): Turn[] {\r\n  if (!algorithm) {\r\n    return []\r\n  }\r\n  let turns: Turn[] = []\r\n  let match\r\n  do {\r\n    match = turnRegex.exec(algorithm)\r\n    if (match) {\r\n      let rawSlices: string = match[1]\r\n      let rawFace: string = match[2]\r\n      let outerBlockIndicator = match[3]\r\n      let rawType = match[4] || TurnAbbreviation.Clockwise // Default to clockwise\r\n      let isLowerCaseMove = rawFace === rawFace.toLowerCase() && cubeRotations.indexOf(rawFace) === -1\r\n\r\n      if (isLowerCaseMove) {\r\n        rawFace = rawFace.toUpperCase()\r\n      }\r\n\r\n      let turn: Turn = {\r\n        move: getMove(rawFace),\r\n        turnType: getTurnType(rawType),\r\n        slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\r\n      }\r\n\r\n      turns.push(turn)\r\n    }\r\n  } while (match)\r\n\r\n  return turns\r\n}\r\n\r\nexport function parseCase(algorithm: string): Turn[] {\r\n  return parseAlgorithm(algorithm)\r\n    .map(turn => {\r\n      return <Turn>{\r\n        turnType: Opposite[turn.turnType],\r\n        move: turn.move,\r\n        slices: turn.slices,\r\n      }\r\n    })\r\n    .reverse()\r\n}\r\n\r\nfunction getSlices(rawSlices, outerBlockIndicator): number {\r\n  if (outerBlockIndicator && !rawSlices) {\r\n    return 2\r\n  } else if (!outerBlockIndicator && rawSlices) {\r\n    throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`)\r\n  } else if (!outerBlockIndicator && !rawSlices) {\r\n    return 1\r\n  } else {\r\n    return parseInt(rawSlices)\r\n  }\r\n}\r\n\r\nfunction getMove(rawFace: string): AlgorithmUnit {\r\n  if (possibleMoves.indexOf(rawFace) < 0) {\r\n    throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`)\r\n  } else return rawFace as AlgorithmUnit\r\n}\r\n\r\nfunction getTurnType(rawType: string): TurnType {\r\n  switch (rawType) {\r\n    case TurnAbbreviation.Clockwise:\r\n      return TurnType.Clockwise\r\n    case TurnAbbreviation.CounterClockwise:\r\n      return TurnType.CounterClockwise\r\n    case TurnAbbreviation.Double:\r\n      return TurnType.Double\r\n    default:\r\n      throw new Error(`Invalid move modifier (${rawType})`)\r\n  }\r\n}\r\n","import { ICubeOptions } from './options'\r\nimport { makeMasking } from './masking'\r\nimport { CubeData } from './simulation'\r\nimport { parseAlgorithm, parseCase, Turn } from './parsing/algorithm'\r\nimport { AllFaces } from './constants'\r\nimport { ColorName, ColorCode } from '../constants'\r\n\r\nexport function makeStickerColors(options: ICubeOptions): string[] {\r\n  let stickerColors = options.stickerColors\r\n  let mask = options.mask ? makeMasking(options.mask, options.cubeSize) : null\r\n\r\n  if (mask && options.maskAlg) {\r\n    let maskCubeData = new CubeData(options.cubeSize, mask)\r\n    let alg = parseAlgorithm(options.maskAlg)\r\n    alg.forEach(turn => {\r\n      maskCubeData.turn(turn)\r\n    })\r\n    mask = maskCubeData.faces\r\n  }\r\n\r\n  // Fill with color scheme if sticker colors not predefined.\r\n  if (!stickerColors) {\r\n    stickerColors = [].concat.apply(\r\n      [],\r\n      AllFaces.map(face => {\r\n        return Array.apply(null, Array(options.cubeSize * options.cubeSize)).map(() => options.colorScheme[face])\r\n      })\r\n    )\r\n  }\r\n\r\n  let faceMappedStickers = AllFaces.reduce((acc, face) => {\r\n    if (!acc[face]) acc[face] = []\r\n\r\n    for (let i = 0; i < options.cubeSize; i++) {\r\n      for (let j = 0; j < options.cubeSize; j++) {\r\n        const faceIndex = AllFaces.indexOf(face)\r\n        const stickerNumber = i * options.cubeSize + j\r\n        const colorIndex = faceIndex * (options.cubeSize * options.cubeSize) + stickerNumber\r\n\r\n        if (stickerColors.length <= colorIndex) {\r\n          acc[face][options.cubeSize * i + j] = ColorName.Black\r\n        } else {\r\n          acc[face][options.cubeSize * i + j] = stickerColors[colorIndex]\r\n        }\r\n\r\n        if (mask && !mask[face][options.cubeSize * i + j]) {\r\n          acc[face][options.cubeSize * i + j] = ColorCode.DarkGray\r\n        }\r\n      }\r\n    }\r\n\r\n    return acc\r\n  }, {})\r\n\r\n  // Apply Algorithm\r\n  let cubeData = new CubeData(options.cubeSize, faceMappedStickers)\r\n\r\n  let alg: Turn[] = []\r\n\r\n  if (options.case) {\r\n    alg = parseCase(options.case)\r\n  } else if (options.algorithm) {\r\n    alg = parseAlgorithm(options.algorithm)\r\n  }\r\n\r\n  alg.forEach(move => {\r\n    cubeData.turn(move)\r\n  })\r\n\r\n  return [].concat.apply([], AllFaces.map(face => cubeData.faces[face].slice()))\r\n}\r\n","import { Axis } from '../../math'\r\nimport { AxisSymbolToAxis } from '../constants'\r\n\r\nexport function parseRotationSequence(rawSequence: string): [Axis, number][] {\r\n  const rotationRegex = /([xyz]-?[0-9][0-9]?[0-9]?)/g\r\n  let match\r\n  let rotations: [Axis, number][] = []\r\n\r\n  do {\r\n    match = rotationRegex.exec(rawSequence)\r\n    if (match) {\r\n      let matchText: string = match[0]\r\n      let axisSymbol = matchText.charAt(0)\r\n      let value = matchText.substr(1)\r\n      let axis = AxisSymbolToAxis[axisSymbol]\r\n      rotations.push([axis, parseInt(value)])\r\n    }\r\n  } while (match)\r\n\r\n  return rotations\r\n}\r\n","import { parseColor } from './color'\r\nimport { ColorAbbreviationToCode } from '../../constants'\r\n\r\nexport function parseFaceletColors(rawValue: string): string[] {\r\n  let colors = []\r\n  if (rawValue.indexOf(',') > -1) {\r\n    // Parse as comma separated colors\r\n    rawValue.split(',').forEach(value => {\r\n      let parsed = parseColor(value)\r\n      if (parsed) {\r\n        colors.push(parsed)\r\n      }\r\n    })\r\n  } else {\r\n    // parse as abbreviations (ex 'yyyyyyyyyrrrrrrrrrbbbbbbbbb....')\r\n    for (let i = 0; i < rawValue.length; i++) {\r\n      colors.push(ColorAbbreviationToCode[rawValue.charAt(i)])\r\n    }\r\n  }\r\n  return colors\r\n}\r\n","import { ICubeColorScheme } from '../models/color-scheme'\r\nimport { parseColor } from './color'\r\nimport { ColorCode, ColorNameToCode, ColorAbbreviationToCode } from '../../constants'\r\nimport { AllFaces, DefaultColorScheme } from '../constants'\r\n\r\nexport function parseColorScheme(rawValue: string): ICubeColorScheme {\r\n  if (rawValue.indexOf(',') > -1) {\r\n    return parseCommaSeparatedValues(rawValue)\r\n  } else {\r\n    return parseAbbreviations(rawValue)\r\n  }\r\n}\r\n\r\nfunction parseAbbreviations(rawValue) {\r\n  let scheme: ICubeColorScheme = {}\r\n  if (rawValue.length < AllFaces.length) {\r\n    return DefaultColorScheme\r\n  }\r\n\r\n  AllFaces.forEach((face, index) => {\r\n    if (rawValue.length > index) {\r\n      scheme[face] = ColorAbbreviationToCode[rawValue.charAt(index)]\r\n    }\r\n  })\r\n\r\n  return scheme\r\n}\r\n\r\nfunction parseCommaSeparatedValues(rawValue) {\r\n  let scheme: ICubeColorScheme = {}\r\n\r\n  // Parse as comma separated list of colors\r\n  let rawColors = rawValue.split(',')\r\n  if (rawColors.length < AllFaces.length) {\r\n    return DefaultColorScheme\r\n  }\r\n  AllFaces.forEach((face, index) => {\r\n    if (rawColors.length > index) {\r\n      let parsedColor = parseColor(rawColors[index])\r\n      let colorCode: ColorCode = ColorNameToCode[parsedColor] || (parsedColor as ColorCode)\r\n      if (parsedColor) {\r\n        scheme[face] = colorCode\r\n      }\r\n    }\r\n  })\r\n\r\n  return scheme\r\n}\r\n","import { FaceletDefinition, FaceletAbbreviateToDefinition } from '../../constants'\r\n\r\nexport function parseFaceletDefinitions(rawValue: string): FaceletDefinition[] {\r\n  let colors = []\r\n  for (let i = 0; i < rawValue.length; i++) {\r\n    colors.push(FaceletAbbreviateToDefinition[rawValue.charAt(i)])\r\n  }\r\n  return colors\r\n}\r\n","import { ICubeOptions } from '../options'\r\nimport { parseRotationSequence } from './rotation'\r\nimport { parseFaceletColors } from './faceletColors'\r\nimport { parseColorScheme } from './colorScheme'\r\nimport { parseFaceletDefinitions } from './faceletDefinitions'\r\n\r\n/**\r\n * Utility methods for parsing the old query param style options\r\n */\r\n\r\nexport function parseOptions(rawOptions: string): ICubeOptions {\r\n  let options: ICubeOptions = {} as any\r\n  let params = parseQuery(rawOptions)\r\n\r\n  Object.keys(params).forEach(key => {\r\n    let paramValue = params[key]\r\n    switch (key) {\r\n      case 'pzl':\r\n        options.cubeSize = parseInt(paramValue) || 3\r\n        break\r\n      case 'size':\r\n        let size = parseInt(paramValue) || 250\r\n        options.width = size\r\n        options.height = size\r\n        break\r\n      case 'view':\r\n        options.view = paramValue\r\n        break\r\n      case 'stage':\r\n        options.mask = paramValue\r\n        break\r\n      case 'r':\r\n        options.viewportRotations = parseRotationSequence(paramValue)\r\n        break\r\n      case 'alg':\r\n        options.algorithm = paramValue\r\n        break\r\n      case 'case':\r\n        options.case = paramValue\r\n        break\r\n      case 'fc':\r\n        options.stickerColors = parseFaceletColors(paramValue)\r\n        break\r\n      case 'sch':\r\n        options.colorScheme = parseColorScheme(paramValue)\r\n        break\r\n      case 'bg':\r\n        options.backgroundColor = paramValue\r\n        break\r\n      case 'cc':\r\n        options.cubeColor = paramValue\r\n        break\r\n      case 'co':\r\n        options.cubeOpacity = parseInt(paramValue) || 100\r\n        break\r\n      case 'fo':\r\n        options.stickerOpacity = parseInt(paramValue) || 100\r\n        break\r\n      case 'dist':\r\n        options.dist = parseInt(paramValue) || 5\r\n        break\r\n      case 'arw':\r\n        options.arrows = paramValue\r\n        break\r\n      case 'fd':\r\n        options.facelets = parseFaceletDefinitions(paramValue)\r\n        break\r\n      case 'ac':\r\n        // TODO: Support default arrow color\r\n        console.warn(\"Currently param 'ac' is unsupported\")\r\n        break\r\n    }\r\n  })\r\n  return options\r\n}\r\n\r\nfunction parseQuery(url) {\r\n  let queryString = url.indexOf('?') > -1 ? url.substr(url.indexOf('?') + 1) : url\r\n  var query = {}\r\n  var pairs = queryString.split('&')\r\n  for (var i = 0; i < pairs.length; i++) {\r\n    var pair = pairs[i].split('=')\r\n    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\r\n  }\r\n  return query\r\n}\r\n","import React, { FC } from 'react'\r\nimport { makeCubeGeometry } from './cube/geometry'\r\nimport { Axis } from './math'\r\nimport { Cube } from './cube/drawing';\r\nimport { ICubeOptions } from './cube/options'\r\nimport { DefaultColorScheme } from './cube/constants'\r\nimport { makeStickerColors } from './cube/stickers'\r\nimport { ColorName } from './constants'\r\nimport { parseOptions } from './cube/parsing/options'\r\nimport { parseFaceletDefinitions } from './cube/parsing/faceletDefinitions'\r\n\r\nconst defaultOptions: ICubeOptions = {\r\n  cubeSize: 3,\r\n  width: 128,\r\n  height: 128,\r\n  viewportRotations: [[Axis.Y, 45], [Axis.X, -34]],\r\n  colorScheme: DefaultColorScheme,\r\n  cubeColor: ColorName.Black,\r\n  cubeOpacity: 100,\r\n  stickerOpacity: 100,\r\n  dist: 5,\r\n  outlineWidth: 0.94,\r\n  strokeWidth: 0,\r\n  viewbox: {\r\n    x: -0.9,\r\n    y: -0.9,\r\n    width: 1.8,\r\n    height: 1.8,\r\n  },\r\n}\r\n\r\nexport const CubeSvg: FC<{extraOptions?: any}> = (props) => {\r\n  let options = getOptions(defaultOptions, props.extraOptions || {})\r\n  let geometry = makeCubeGeometry(options)\r\n  options.stickerColors = makeStickerColors(options)\r\n\r\n  return <Cube geometry={geometry} options={options} />\r\n}\r\n\r\nfunction getOptions(defaultOptions: ICubeOptions, extraOptions: string | ICubeOptions): ICubeOptions {\r\n  let parsedOptions: ICubeOptions\r\n  if (typeof extraOptions === 'string') {\r\n    parsedOptions = parseOptions(extraOptions)\r\n  } else {\r\n    parsedOptions = extraOptions\r\n  }\r\n\r\n  if (typeof parsedOptions.facelets === 'string') {\r\n    parsedOptions.facelets = parseFaceletDefinitions(parsedOptions.facelets)\r\n  }\r\n\r\n  return { ...defaultOptions, ...parsedOptions }\r\n}\r\n"],"names":["ColorCode","ColorName","ColorAbbreviation","FaceletDefinition","ColorNameToCode","Black","DarkGray","Gray","Silver","White","Yellow","Red","Orange","Blue","Green","Purple","Pink","ColorAbbreviationToCode","Transparent","FaceletAbbreviateToDefinition","u","Up","f","Front","r","Right","d","Down","l","Left","b","Back","t","o","Oriented","n","Blank","FaceletToFace","FaceletToColor","Face","AllFaces","U","R","F","D","L","B","DefaultColorScheme","JapaneseColorScheme","AlgorithmUnit","AxisSymbolToAxis","x","y","z","possibleMoves","M","E","S","X","Y","Z","cubeRotations","TurnAbbreviation","Masking","Axis","makeMatrix","rows","cols","matrix","c","translate","pos","v","map","value","index","scale","scalar","transScale","iv","rotate","axis","radians","newPosition","Math","cos","sin","project","radians2Degrees","PI","rotateFaces","faceRotations","rotations","reduce","acc","face","forEach","rotation","makeStickerPosition","cubeSize","Error","makeFaceStickers","options","stickers","row","col","sticker","centerTranslation","viewportRotations","dist","makeCubeGeometry","view","parseColor","raw","colorcodeRegex","exec","stickerPattern","colorPattern","arrowPattern","parseArrows","split","part","parseArrow","filter","arrow","arrowRegex","RegExp","match","s1","parseInt","s2","s3","undefined","color","influence","defaultFaceRotations","viewBox","width","height","polygonPoints","points","point","join","getRenderOrder","renderOrder","sort","a","Background","fill","fillOpacity","backgroundColor","Rect","viewbox","faceVisible","CubeOutlineGroup","children","G","cubeOpacity","OllLayerGroup","stickerOpacity","ArrowGroup","CubeOutline","length","outlineWidth","outlinePoints","Polygon","cubeColor","FaceStickersSvg","stickerElements","i","j","centerPoint","p1","p2","p3","p4","getStickerColor","push","strokeWidth","Sticker","props","stickerColor","stickerPoints","faceIndex","indexOf","stickerNumber","colorIndex","Array","isArray","facelets","stickerColors","fd","colorScheme","OLLStickers","v1","v2","ArrowSvg","geometry","p1y","floor","p1x","p2y","p2x","center","p3y","p3x","p_","atan","lineSvg","Path","headSvg","Cube","hiddenFaces","visibleFaces","arrowDefinitions","arrows","Svg","maskingFunctions","FL","F2L","LL","CLL","ELL","OLL","OCLL","OELL","COLL","OCELL","WV","VH","ELS","CLS","CMLL","CROSS","F2L3","F2L2","F2LSM","F2L1","F2B","LINE","makeMasking","masking","numStickers","faceValues","TurnType","faceIdentity","counterClockwiseSticker","clockwiseSticker","doubleTurn","OppositeTurn","Clockwise","CounterClockwise","Double","AxisMapping","AxisOrientation","CubeData","initialValues","clockwiseMapping","counterClockwiseMapping","doubleMapping","faces","initValues","currentValue","rotateFace","turn","newStickerNumber","reverse","axisRotation","offset","range","faceOrder","forward","double","originalValues","slice","stickerIndex","nextFace","valueIndex","nextFaceValueIndex","xLayersRotation","yLayersRotation","zLayersRotation","safeSlices","rTurn","turnType","slices","lTurn","uTurn","dTurn","fTurn","bTurn","mTurn","eTurn","sTurn","xTurn","yTurn","zTurn","move","JSON","stringify","turnRegex","Opposite","parseAlgorithm","algorithm","turns","rawSlices","rawFace","outerBlockIndicator","rawType","isLowerCaseMove","toLowerCase","toUpperCase","getMove","getTurnType","getSlices","parseCase","makeStickerColors","mask","maskAlg","maskCubeData","alg","concat","apply","faceMappedStickers","cubeData","parseRotationSequence","rawSequence","rotationRegex","matchText","axisSymbol","charAt","substr","parseFaceletColors","rawValue","colors","parsed","parseColorScheme","parseCommaSeparatedValues","parseAbbreviations","scheme","rawColors","parsedColor","colorCode","parseFaceletDefinitions","parseOptions","rawOptions","params","parseQuery","Object","keys","key","paramValue","size","console","warn","url","queryString","query","pairs","pair","decodeURIComponent","defaultOptions","CubeSvg","getOptions","extraOptions","parsedOptions"],"mappings":"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"}